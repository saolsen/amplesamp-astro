---
import Layout from "../layouts/Layout.astro";

import getUserConnection from "../auth";

let sb_user = null;
let user = await getUserConnection(Astro.cookies);
if (user) {
  sb_user = user.user.email;
} else {
  return Astro.redirect("/");
}

const source = `
# test program
type Organization {
    i: Int,
    number_of_employees: Int,
}
print 1
print 2
#print 1 + 2
github_org = create Organization {
    i: 1,
    number_of_employees: 1,
}
print github_org
`;
---

<Layout title="Amplesamp">
  <header class="header app__header">
    <h1>amplesamp</h1>
    <nav class="nav">
      <nav class="nav">
        <div class="nav-item">
          <a class="button" href="/api/auth?action=logout"> logout</a>
        </div>
      </nav>
    </nav>
  </header>
  <main>
    <section class="editor-panal">
      <header class="header">
        <h2>{sb_user}</h2>
        <nav class="nav">
          <div class="nav-item">
            <button
              class="button nav-item"
              hx-post="/run"
              hx-include="#program_source"
              hx-target="#program_output"
            >
              Run
            </button>
          </div>
        </nav>
      </header>
      <div class="editor-wrapper">
        <div class="editor" id="program_editor"></div>
      </div>
    </section>
    <section class="results-panal">
      <header class="header">
        <nav class="nav tabs">
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab1"
            onclick="tabClick(this);"
            value="results-tab"
            checked
          />
          <label class="nav__item" for="tab1">Results</label>
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab2"
            onclick="tabClick(this);"
            value="errors-tab"
          />
          <label class="nav__item" for="tab2">Errors</label>
        </nav>
      </header>
      <div id="program_output" class="results">
        <div id="results-tab" class="tab content1">Run to see results</div>
        <div id="errors-tab" class="tab content2">Run to see errors</div>
      </div>
    </section>
  </main>
  <textarea id="program_source" name="source" style="display: none"
    >{source}</textarea
  >
  <footer class="footer app__footer">Amplesamp (vercel)</footer>
</Layout>
<script>
  import * as monaco from "monaco-editor";
  import { compile } from "amplesamp-wasm";

  let source_element = document.getElementById(
    "program_source"
  ) as HTMLTextAreaElement;
  let source = source_element?.value;
  let editor_element = document.getElementById(
    "program_editor"
  ) as HTMLDivElement;
  let code_editor = monaco.editor.create(editor_element, {
    value: source,
    language: "python", // todo: my language
    glyphMargin: true,
    minimap: { enabled: false },
    automaticLayout: true,
  });

  async function compile_src() {
    // keep editor in sync with the source element
    let new_source = code_editor.getValue();
    source_element.value = new_source;

    let result = compile(new_source);

    const markers = [];
    for (let error of result) {
      markers.push({
        message: error.message,
        severity: monaco.MarkerSeverity.Error,
        startLineNumber: error.line,
        startColumn: error.column,
        endLineNumber: error.line,
        endColumn: error.column,
      });
    }

    let model = code_editor.getModel();
    if (model) {
      monaco.editor.setModelMarkers(model, "owner", markers);
    }
  }
  compile_src();

  code_editor.onDidChangeModelContent(function (_) {
    compile_src();
  });
</script>
<style>
  main {
    height: 100%;
    width: 100%;
    display: flex;
    align-items: stretch;
  }

  section {
    margin: 6px;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .editor-wrapper {
    flex: 1;
  }

  .editor {
    outline: black 2px solid;
    height: 100%;
  }
</style>
