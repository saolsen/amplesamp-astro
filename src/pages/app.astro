---
import Layout from "../layouts/Layout.astro";
import Results from "../components/Results";

import getUserConnection from "../auth";

let user_email = null;
let user = await getUserConnection(Astro.cookies);
if (user) {
  user_email = user.user.email;
} else {
  return Astro.redirect("/");
}

const source = `# Create some test orgs
type Organization {
    i: Int,
    name: String,
    number_of_employees: Int,
}
type Repository {
    i: Int,
    name: String,
    organization: Organization,
}
type Issue {
    i: Int,
    repository: Repository,
    name: String
}

steve_org = create Organization {
    i: 1,
    name: @String,
    number_of_employees: @Int,
}

# 3 random repositories
repo1 = create Repository {
    i: @Int,
    name: @String,
    organization: steve_org
}
repo2 = create Repository {
    i: @Int,
    name: @String,
    organization: steve_org
}
repo3 = create Repository {
    i: @Int,
    name: @String,
    organization: steve_org
}

# 3 random issues 
random_repo = query Repository{}
issue1 = create Issue {
    i: @Int,
    name: @String,
    repository: random_repo
}
random_repo = query Repository{}
issue2 = create Issue {
    i: @Int,
    name: @String,
    repository: random_repo
}
random_repo = query Repository{}
issue3 = create Issue {
    i: @Int,
    name: @String,
    repository: random_repo
}

print 1 + 2 / 3 * 4 % -6 <= 999 && !(1==1);
`;
---

<Layout title="Amplesamp">
  <header class="header app__header">
    <h1>amplesamp</h1>
    <nav class="nav">
      <nav class="nav">
        <div class="nav-item">
          <a class="button" href="/logout"> logout</a>
        </div>
      </nav>
    </nav>
  </header>
  <main>
    <section class="editor-panal">
      <header class="header">
        <h2>{user_email}</h2>
        <nav class="nav">
          <div class="nav-item">
            <button class="button nav-item" onclick="runClick()"> Run</button>
          </div>
        </nav>
      </header>
      <div class="editor-wrapper">
        <div class="editor" id="program_editor"></div>
      </div>
    </section>
    <section class="results-panal">
      <header class="header">
        <nav class="nav tabs">
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab1"
            onclick="tabClick(this);"
            value="objects-tab"
            checked
          />
          <label class="nav-item" for="tab1">Objects</label>
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab2"
            onclick="tabClick(this);"
            value="output-tab"
          />
          <label class="nav-item" for="tab2">Output</label>
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab3"
            onclick="tabClick(this);"
            value="errors-tab"
          />
          <label class="nav-item" for="tab3">Errors</label>
        </nav>
      </header>
      <div class="results">
        <Results client:load />
      </div>
    </section>
  </main>
  <textarea id="program_source" name="source" style="display: none"
    >{source}</textarea
  >
  <footer class="footer app__footer">Amplesamp (vercel)</footer>
</Layout>
<script>
  import * as monaco from "monaco-editor";
  import { action } from "nanostores";
  import { compile, Vm } from "amplesamp-wasm";
  import { appStore, Results } from "../app";

  const updateSourceAndCompile = action(
    appStore,
    "compile",
    (store, new_source: string) => {
      store.setKey("source", new_source);
      try {
        compile(new_source);
        store.setKey("errors", []);
      } catch (e: any) {
        store.setKey("errors", e);
      }
    }
  );

  export const runProgram = action(appStore, "run", (store) => {
    const source = store.get().source;
    try {
      const vm = new Vm(source);
      const results = vm.run() as Results;
      console.log(results);
      store.setKey("results", results);
      store.setKey("errors", results.errors);
    } catch (e: any) {
      console.error(e);
      store.setKey("errors", [e]);
    }
  });

  let source_element = document.getElementById(
    "program_source"
  ) as HTMLTextAreaElement;
  let source = source_element?.value;
  let editor_element = document.getElementById(
    "program_editor"
  ) as HTMLDivElement;
  let code_editor = monaco.editor.create(editor_element, {
    value: source,
    language: "python", // todo: my language
    glyphMargin: true,
    minimap: { enabled: false },
    automaticLayout: true,
  });

  // Update editor markers when store changes.
  appStore.listen((value, key) => {
    if (key == "errors") {
      const errors = value[key];
      const markers = [];
      for (let error of errors) {
        markers.push({
          message: error.message,
          severity: monaco.MarkerSeverity.Error,
          startLineNumber: error.line,
          startColumn: error.column,
          endLineNumber: error.line,
          endColumn: error.column,
        });
      }

      let model = code_editor.getModel();
      if (model) {
        monaco.editor.setModelMarkers(model, "owner", markers);
      }
    }
  });

  // Update store when editor changes.
  async function sourceChanged() {
    let new_source = code_editor.getValue();
    source_element.value = new_source;
    updateSourceAndCompile(new_source);
  }

  code_editor.onDidChangeModelContent(function (_) {
    sourceChanged();
  });

  // Call to initialize errors.
  sourceChanged();

  // Tabs

  let selected_tab = "objects-tab";
  let tabs = ["objects-tab", "output-tab", "errors-tab"];

  function showTab(id: string) {
    selected_tab = id;
    for (const tabId of tabs) {
      let tab = document.getElementById(tabId);
      if (tab) {
        if (tabId === id) {
          tab.style.display = "block";
        } else {
          tab.style.display = "none";
        }
      }
    }
  }
  showTab(selected_tab);

  function tabClick(element: HTMLInputElement) {
    showTab(element.value);
  }

  function runClick(_: HTMLButtonElement) {
    runProgram();
  }

  declare global {
    function tabClick(element: HTMLInputElement): void;
    function runClick(element: HTMLButtonElement): void;
  }
  globalThis.tabClick = tabClick;
  globalThis.runClick = runClick;
</script>
<style>
  main {
    height: 100%;
    width: 100%;
    display: flex;
    align-items: stretch;
  }

  section {
    margin: 6px;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .editor-wrapper {
    flex: 1;
  }

  .editor {
    outline: black 2px solid;
    height: 100%;
  }

  .results {
    outline: black 2px solid;
    height: 100%;
  }

  .tab-input {
    display: none;
  }

  .tab-input:checked + label {
    background-color: var(--color-blue);
  }

  .tab {
    display: none;
  }
</style>
