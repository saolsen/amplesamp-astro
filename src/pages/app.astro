---
import Layout from "../layouts/Layout.astro";

import getUserConnection from "../auth";

let user_email = null;
let user = await getUserConnection(Astro.cookies);
if (user) {
  user_email = user.user.email;
} else {
  return Astro.redirect("/");
}

const source = `
# test program
type Organization {
    i: Int,
    number_of_employees: Int,
}
print 1
print 2
#print 1 + 2
github_org = create Organization {
    i: 1,
    number_of_employees: 1,
}
print github_org
`;
---

<Layout title="Amplesamp">
  <header class="header app__header">
    <h1>amplesamp</h1>
    <nav class="nav">
      <nav class="nav">
        <div class="nav-item">
          <a class="button" href="/logout"> logout</a>
        </div>
      </nav>
    </nav>
  </header>
  <main>
    <section class="editor-panal">
      <header class="header">
        <h2>{user_email}</h2>
        <nav class="nav">
          <div class="nav-item">
            <button class="button nav-item" onclick="runClick()"> Run</button>
          </div>
        </nav>
      </header>
      <div class="editor-wrapper">
        <div class="editor" id="program_editor"></div>
      </div>
    </section>
    <section class="results-panal">
      <header class="header">
        <nav class="nav tabs">
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab1"
            onclick="tabClick(this);"
            value="results-tab"
            checked
          />
          <label class="nav-item" for="tab1">Results</label>
          <input
            class="tab-input"
            type="radio"
            name="tabs"
            id="tab2"
            onclick="tabClick(this);"
            value="errors-tab"
          />
          <label class="nav-item" for="tab2">Errors</label>
        </nav>
      </header>
      <div id="program_output" class="results">
        <div id="results-tab" class="tab content1">
          <div id="results">results go here</div>
        </div>
        <div id="errors-tab" class="tab content2">Run to see errors</div>
      </div>
    </section>
  </main>
  <textarea id="program_source" name="source" style="display: none"
    >{source}</textarea
  >
  <footer class="footer app__footer">Amplesamp (vercel)</footer>
</Layout>
<script>
  import * as monaco from "monaco-editor";
  import { compile, Vm } from "amplesamp-wasm";

  let source_element = document.getElementById(
    "program_source"
  ) as HTMLTextAreaElement;
  let source = source_element?.value;
  let editor_element = document.getElementById(
    "program_editor"
  ) as HTMLDivElement;
  let code_editor = monaco.editor.create(editor_element, {
    value: source,
    language: "python", // todo: my language
    glyphMargin: true,
    minimap: { enabled: false },
    automaticLayout: true,
  });

  async function compile_src() {
    // keep editor in sync with the source element
    let new_source = code_editor.getValue();
    source_element.value = new_source;

    try {
      compile(new_source);
    } catch (e: any) {
      const markers = [];
      for (let error of e) {
        markers.push({
          message: error.message,
          severity: monaco.MarkerSeverity.Error,
          startLineNumber: error.line,
          startColumn: error.column,
          endLineNumber: error.line,
          endColumn: error.column,
        });
      }

      let model = code_editor.getModel();
      if (model) {
        monaco.editor.setModelMarkers(model, "owner", markers);
      }
    }
  }
  compile_src();

  code_editor.onDidChangeModelContent(function (_) {
    compile_src();
  });

  // Tabs

  let selected_tab = "results-tab";
  let tabs = ["results-tab", "errors-tab"];

  function showTab(id: string) {
    selected_tab = id;
    for (const tabId of tabs) {
      let tab = document.getElementById(tabId);
      if (tab) {
        if (tabId === id) {
          tab.style.display = "block";
        } else {
          tab.style.display = "none";
        }
      }
    }
  }
  showTab(selected_tab);

  function tabClick(element: HTMLInputElement) {
    showTab(element.value);
  }

  function run() {
    const source = code_editor.getValue();
    try {
      let vm = new Vm(source);
      let result = vm.run();
      console.log(result);
      let element = document.getElementById("results");
      // todo: better way of showing this.
      // dont really wanna do like a full react/solid
      // thing for both sides of this but could if I need to.
      if (element) {
        element.innerText = JSON.stringify(result, null, 2);
      }
    } catch (e: any) {
      console.log(e);
    }
  }

  function runClick(_: HTMLButtonElement) {
    run();
  }

  declare global {
    function tabClick(element: HTMLInputElement): void;
    function runClick(element: HTMLButtonElement): void;
  }
  globalThis.tabClick = tabClick;
  globalThis.runClick = runClick;
</script>
<style>
  main {
    height: 100%;
    width: 100%;
    display: flex;
    align-items: stretch;
  }

  section {
    margin: 6px;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .editor-wrapper {
    flex: 1;
  }

  .editor {
    outline: black 2px solid;
    height: 100%;
  }

  .tab-input {
    display: none;
  }

  .tab-input:checked + label {
    background-color: var(--color-blue);
  }

  .tab {
    display: none;
  }
</style>
